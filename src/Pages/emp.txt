import React, { useState, useEffect } from 'react';
import { FaHome } from 'react-icons/fa';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { toast, Toaster } from 'react-hot-toast';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const AddEmployee = () => {
  const [departments, setDepartments] = useState([]);
  const [designations, setDesignations] = useState([]);
  const [shifts, setShifts] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    fetchDepartments();
    fetchDesignations();
    fetchShifts();
  }, []);

  const fetchDepartments = async () => {
    try {
      const response = await axios.get('http://127.0.0.1:5000/api/departments');
      setDepartments(response.data);
    } catch (error) {
      console.error('Error fetching departments:', error);
    }
  };

  const fetchDesignations = async () => {
    try {
      const response = await axios.get('http://127.0.0.1:5000/api/designations');
      setDesignations(response.data);
    } catch (error) {
      console.error('Error fetching designations:', error);
    }
  };

  const fetchShifts = async () => {
    try {
      const response = await axios.get('http://127.0.0.1:5000/api/shifts');
      setShifts(response.data);
    } catch (error) {
      console.error('Error fetching shifts:', error);
    }
  };

  const formik = useFormik({
    initialValues: {
      department: '',
      designation: '',
      shift: '',
      name: '',
      joiningDate: '',
      leavingDate: '',
      email: '',
      phone: '',
      presentAddress: '',
      permanentAddress: '',
      emergencyContact: '',
      nidNumber: '',
      gender: '',
      religion: '',
      maritalStatus: '',
      dob: '',
      salaryType: '',
      salary: '',
      status: '',
      image: null,
      accountHolderName: '',
      accountNumber: '',
      bankName: '',
      bankIdentifierCode: '',
      branchLocation: '',
      taxPayerId: '',
    },
    validationSchema: Yup.object({
      department: Yup.string().required('Department is required'),
      designation: Yup.string().required('Designation is required'),
      shift: Yup.string().required('Shift is required'),
      name: Yup.string().required('Name is required'),
      joiningDate: Yup.date().required('Joining Date is required'),
      email: Yup.string().email('Invalid email format').required('Email is required'),
      phone: Yup.string().required('Phone is required'),
      presentAddress: Yup.string().required('Present Address is required'),
      permanentAddress: Yup.string().required('Permanent Address is required'),
      emergencyContact: Yup.string().required('Emergency Contact is required'),
      nidNumber: Yup.string().required('NID Number is required'),
      gender: Yup.string().required('Gender is required'),
      dob: Yup.date().required('Date of Birth is required'),
      salaryType: Yup.string().required('Salary Type is required'),
      salary: Yup.number().required('Salary is required'),
      status: Yup.string().required('Status is required'),
    }),
    onSubmit: async (values) => {
      try {
        const formData = new FormData();
        Object.keys(values).forEach((key) => {
          if (values[key]) {
            formData.append(key, values[key]);
          }
        });

        await axios.post('http://127.0.0.1:5000/api/employees', formData, {
          headers: { 'Content-Type': 'multipart/form-data' },
        });
        toast.success('Employee added successfully');
        navigate('/employees');
      } catch (error) {
        toast.error('Failed to add employee');
        console.error(error);
      }
    },
  });

  const handleImageChange = (event) => {
    formik.setFieldValue('image', event.currentTarget.files[0]);
  };

  return (
    <div className="p-6">
      <Toaster />
      <div className="flex items-center space-x-2 mb-4">
        <FaHome className="text-blue-500" />
        <span className="text-xl font-semibold">Home</span>
        <span className="text-gray-500">/</span>
        <span className="text-xl font-semibold">Employees</span>
        <span className="text-gray-500">/</span>
        <span className="text-xl font-semibold">Add Employee</span>
      </div>

      <h2 className="text-2xl font-semibold mb-4">Add Employee</h2>
      <h3 className="text-lg font-semibold mb-4">Employee Details</h3>

      <form onSubmit={formik.handleSubmit}>
        {/* Department */}
        <div className="mb-4">
          <label className="block text-gray-700">Department *</label>
          <select
            name="department"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.department}
          >
            <option value="" label="Select department" />
            {departments.map((department) => (
              <option key={department._id} value={department.name}>
                {department.name}
              </option>
            ))}
          </select>
          {formik.touched.department && formik.errors.department ? (
            <div className="text-red-500 text-sm">{formik.errors.department}</div>
          ) : null}
        </div>

        {/* Designation */}
        <div className="mb-4">
          <label className="block text-gray-700">Designation *</label>
          <select
            name="designation"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.designation}
          >
            <option value="" label="Select designation" />
            {designations.map((designation) => (
              <option key={designation._id} value={designation.name}>
                {designation.name}
              </option>
            ))}
          </select>
          {formik.touched.designation && formik.errors.designation ? (
            <div className="text-red-500 text-sm">{formik.errors.designation}</div>
          ) : null}
        </div>

        {/* Shift */}
        <div className="mb-4">
          <label className="block text-gray-700">Shift *</label>
          <select
            name="shift"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.shift}
          >
            <option value="" label="Select shift" />
            {shifts.map((shift) => (
              <option key={shift._id} value={shift.name}>
                {shift.name}
              </option>
            ))}
          </select>
          {formik.touched.shift && formik.errors.shift ? (
            <div className="text-red-500 text-sm">{formik.errors.shift}</div>
          ) : null}
        </div>

        {/* Name */}
        <div className="mb-4">
          <label className="block text-gray-700">Name *</label>
          <input
            type="text"
            name="name"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.name}
          />
          {formik.touched.name && formik.errors.name ? (
            <div className="text-red-500 text-sm">{formik.errors.name}</div>
          ) : null}
        </div>

        {/* Joining Date */}
        <div className="mb-4">
          <label className="block text-gray-700">Joining Date *</label>
          <input
            type="date"
            name="joiningDate"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.joiningDate}
          />
          {formik.touched.joiningDate && formik.errors.joiningDate ? (
            <div className="text-red-500 text-sm">{formik.errors.joiningDate}</div>
          ) : null}
        </div>

        {/* Leaving Date */}
        <div className="mb-4">
          <label className="block text-gray-700">Leaving Date</label>
          <input
            type="date"
            name="leavingDate"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.leavingDate}
          />
          {formik.touched.leavingDate && formik.errors.leavingDate ? (
            <div className="text-red-500 text-sm">{formik.errors.leavingDate}</div>
          ) : null}
        </div>

        {/* Email */}
        <div className="mb-4">
          <label className="block text-gray-700">Email *</label>
          <input
            type="email"
            name="email"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.email}
          />
          {formik.touched.email && formik.errors.email ? (
            <div className="text-red-500 text-sm">{formik.errors.email}</div>
          ) : null}
        </div>

        {/* Phone */}
        <div className="mb-4">
          <label className="block text-gray-700">Phone *</label>
          <input
            type="text"
            name="phone"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.phone}
          />
          {formik.touched.phone && formik.errors.phone ? (
            <div className="text-red-500 text-sm">{formik.errors.phone}</div>
          ) : null}
        </div>

        {/* Present Address */}
        <div className="mb-4">
          <label className="block text-gray-700">Present Address *</label>
          <input
            type="text"
            name="presentAddress"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.presentAddress}
          />
          {formik.touched.presentAddress && formik.errors.presentAddress ? (
            <div className="text-red-500 text-sm">{formik.errors.presentAddress}</div>
          ) : null}
        </div>

        {/* Permanent Address */}
        <div className="mb-4">
          <label className="block text-gray-700">Permanent Address *</label>
          <input
            type="text"
            name="permanentAddress"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.permanentAddress}
          />
          {formik.touched.permanentAddress && formik.errors.permanentAddress ? (
            <div className="text-red-500 text-sm">{formik.errors.permanentAddress}</div>
          ) : null}
        </div>

        {/* Emergency Contact */}
        <div className="mb-4">
          <label className="block text-gray-700">Emergency Contact *</label>
          <input
            type="text"
            name="emergencyContact"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.emergencyContact}
          />
          {formik.touched.emergencyContact && formik.errors.emergencyContact ? (
            <div className="text-red-500 text-sm">{formik.errors.emergencyContact}</div>
          ) : null}
        </div>

        {/* NID Number */}
        <div className="mb-4">
          <label className="block text-gray-700">NID Number *</label>
          <input
            type="text"
            name="nidNumber"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.nidNumber}
          />
          {formik.touched.nidNumber && formik.errors.nidNumber ? (
            <div className="text-red-500 text-sm">{formik.errors.nidNumber}</div>
          ) : null}
        </div>

        {/* Gender */}
        <div className="mb-4">
          <label className="block text-gray-700">Gender *</label>
          <select
            name="gender"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.gender}
          >
            <option value="" label="Select gender" />
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Other">Other</option>
          </select>
          {formik.touched.gender && formik.errors.gender ? (
            <div className="text-red-500 text-sm">{formik.errors.gender}</div>
          ) : null}
        </div>

        {/* Date of Birth */}
        <div className="mb-4">
          <label className="block text-gray-700">Date of Birth *</label>
          <input
            type="date"
            name="dob"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.dob}
          />
          {formik.touched.dob && formik.errors.dob ? (
            <div className="text-red-500 text-sm">{formik.errors.dob}</div>
          ) : null}
        </div>

        {/* Salary Type */}
        <div className="mb-4">
          <label className="block text-gray-700">Salary Type *</label>
          <select
            name="salaryType"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.salaryType}
          >
            <option value="" label="Select salary type" />
            <option value="Monthly">Monthly</option>
            <option value="Hourly">Hourly</option>
          </select>
          {formik.touched.salaryType && formik.errors.salaryType ? (
            <div className="text-red-500 text-sm">{formik.errors.salaryType}</div>
          ) : null}
        </div>

        {/* Salary */}
        <div className="mb-4">
          <label className="block text-gray-700">Salary *</label>
          <input
            type="number"
            name="salary"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.salary}
          />
          {formik.touched.salary && formik.errors.salary ? (
            <div className="text-red-500 text-sm">{formik.errors.salary}</div>
          ) : null}
        </div>

        {/* Status */}
        <div className="mb-4">
          <label className="block text-gray-700">Status *</label>
          <select
            name="status"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.status}
          >
            <option value="" label="Select status" />
            <option value="Active">Active</option>
            <option value="Inactive">Inactive</option>
          </select>
          {formik.touched.status && formik.errors.status ? (
            <div className="text-red-500 text-sm">{formik.errors.status}</div>
          ) : null}
        </div>

        {/* Image Upload */}
        <div className="mb-4">
          <label className="block text-gray-700">Upload Image</label>
          <input
            type="file"
            name="image"
            className="w-full border rounded-md p-2"
            onChange={handleImageChange}
          />
        </div>

        {/* Account Information */}
        <h3 className="text-lg font-semibold mb-4">Account Information</h3>

        <div className="mb-4">
          <label className="block text-gray-700">Account Holder Name</label>
          <input
            type="text"
            name="accountHolderName"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.accountHolderName}
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Account Number</label>
          <input
            type="text"
            name="accountNumber"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.accountNumber}
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Bank Name</label>
          <input
            type="text"
            name="bankName"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.bankName}
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Bank Identifier Code</label>
          <input
            type="text"
            name="bankIdentifierCode"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.bankIdentifierCode}
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Branch Location</label>
          <input
            type="text"
            name="branchLocation"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.branchLocation}
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700">Swift Code</label>
          <input
            type="text"
            name="swiftCode"
            className="w-full border rounded-md p-2"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.swiftCode}
          />
        </div>

        {/* Submit Button */}
        <button
          type="submit"
          className="bg-blue-500 text-white px-4 py-2 rounded-md"
        >
          Submit
        </button>
      </form>
    </div>
  );
};

export default AddEmployee;
